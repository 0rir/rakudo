# This script reads the native_array.pm file from STDIN, and generates the
# shapedintarray, shapednumarray and shapedstrarray roles in it, and writes
# it to STDOUT.

use v6;

my $generator = $*PROGRAM-NAME;
my $generated = DateTime.now.gist.subst(/\.\d+/,'');
my $start     = '#- start of generated part of shaped';
my $idpos     = $start.chars;
my $idchars   = 3;
my $end       = '#- end of generated part of shaped';

# for all the lines in the source that don't need special handling
for $*IN.lines -> $line {

    # nothing to do yet
    unless $line.starts-with($start) {
        say $line;
        next;
    }

    # found header
    my $type = $line.substr($idpos,$idchars);
    die "Don't know how to handle $type" unless $type eq "int" | "num" | "str";
    say $start ~ $type ~ "array role -----------------------------";
    say "#- Generated on $generated by $generator";
    say "#- PLEASE DON'T CHANGE ANYTHING BELOW THIS LINE";

    # skip the old version of the code
    for $*IN.lines -> $line {
        last if $line.starts-with($end);
    }

    # set up template values
    my %mapper =
      postfix => $type.substr(0,1),
      type    => $type,
      Type    => $type.tclc,
    ;

    # spurt the roles
    say Q:to/SOURCE/.subst(/ '#' (\w+) '#' /, -> $/ { %mapper{$0} }, :g).chomp;

    role shaped#type#array does shapedarray {
        multi method AT-POS(shaped#type#array:D: **@indices) is raw {
            nqp::if(
              nqp::iseq_i(
                (my int $numdims = nqp::numdimensions(self)),
                (my int $numind  = @indices.elems),  # reifies
              ),
              nqp::stmts(
                (my $indices := nqp::getattr(@indices,List,'$!reified')),
                (my $idxs := nqp::list_i),
                nqp::while(                          # native index list
                  nqp::isge_i(($numdims = nqp::sub_i($numdims,1)),0),
                  nqp::push_i($idxs,nqp::shift($indices))
                ),
#?if moar
                nqp::multidimref_#postfix#(self,$idxs)
#?endif
#?if !moar
                nqp::atposnd_#postfix#(self,$idxs)
#?endif
              ),
              nqp::if(
                nqp::isgt_i($numind,$numdims),
                X::TooManyDimensions.new(
                  operation => 'access',
                  got-dimensions => $numind,
                  needed-dimensions => $numdims
                ).throw,
                X::NYI.new(
                  feature => "Partially dimensioned views of arrays"
                ).throw
              )
            )
        }

        multi method ASSIGN-POS(shaped#type#array:D: **@indices) {
            nqp::stmts(
              (my #type# $value = @indices.pop),
              nqp::if(
                nqp::iseq_i(
                  (my int $numdims = nqp::numdimensions(self)),
                  (my int $numind  = @indices.elems),  # reifies
                ),
                nqp::stmts(
                  (my $indices := nqp::getattr(@indices,List,'$!reified')),
                  (my $idxs := nqp::list_i),
                  nqp::while(                          # native index list
                    nqp::isge_i(($numdims = nqp::sub_i($numdims,1)),0),
                    nqp::push_i($idxs,nqp::shift($indices))
                  ),
                  nqp::bindposnd_#postfix#(self, $idxs, $value)
                ),
                nqp::if(
                  nqp::isgt_i($numind,$numdims),
                  X::TooManyDimensions,
                  X::NotEnoughDimensions
                ).new(
                  operation => 'assign to',
                  got-dimensions => $numind,
                  needed-dimensions => $numdims
                ).throw
              )
            )
        }
    }  # end of shaped#type#array role

    role shaped1#type#array does shaped#type#array {
        multi method AT-POS(shaped1#type#array:D: int $idx) is raw {
           nqp::atposref_#postfix#(self,$idx)
        }
        multi method AT-POS(shaped1#type#array:D: Int:D $idx) is raw {
           nqp::atposref_#postfix#(self,$idx)
        }

        multi method ASSIGN-POS(shaped1#type#array:D: int $idx, #type# $value) {
            nqp::bindpos_#postfix#(self,$idx,$value)
        }
        multi method ASSIGN-POS(shaped1#type#array:D: Int:D $idx, #type# $value) {
            nqp::bindpos_#postfix#(self,$idx,$value)
        }
        multi method ASSIGN-POS(shaped1#type#array:D: int $idx, #Type#:D $value) {
            nqp::bindpos_#postfix#(self,$idx,$value)
        }
        multi method ASSIGN-POS(shaped1#type#array:D: Int:D $idx, #Type#:D $value) {
            nqp::bindpos_#postfix#(self,$idx,$value)
        }

        multi method EXISTS-POS(shaped1#type#array:D: int $idx) {
            nqp::p6bool(
              nqp::isge_i($idx,0) && nqp::islt_i($idx,nqp::elems(self))
            )
        }
        multi method EXISTS-POS(shaped1#type#array:D: Int:D $idx) {
            nqp::p6bool(
              nqp::isge_i($idx,0) && nqp::islt_i($idx,nqp::elems(self))
            )
        }
    }

    role shaped#type#2array {
    }

    role shaped#type#3array {
    }
SOURCE

    # we're done for this role
    say "#- PLEASE DON'T CHANGE ANYTHING ABOVE THIS LINE";
    say $end ~ $type ~ "array role -------------------------------";
}
