CC      = @moar::cc@
LD      = @moar::ld@
CFLAGS  = @moar::cflags@ @moar::ccmiscflags@ @moar::ccoptiflags@ @moar::ccwarnflags@
LDFLAGS = @moar::ldflags@ @moar::ldmiscflags@ @moar::ldoptiflags@ @moar::ldlibs@

PERL    = perl
PROVE   = prove
GEN_CAT = tools/build/gen-cat.pl moar

PREFIX = @prefix@
MOAR   = $(PREFIX)/bin/moar@exe@
NQP    = $(PREFIX)/bin/nqp@runner_suffix@

PERL6_LANG_DIR = $(PREFIX)/languages/perl6

MKPATH = $(PERL) -MExtUtils::Command -e mkpath
CP     = $(PERL) -MExtUtils::Command -e cp
CHMOD  = $(PERL) -MExtUtils::Command -e chmod
RM_F   = $(PERL) -MExtUtils::Command -e rm_f
RM_RF  = $(PERL) -MExtUtils::Command -e rm_rf

RUNNER = perl6@runner_suffix@
PREFIX = @moar::prefix@

# files we create
PERL6_MOAR     = perl6.moarvm
PERL6_ML_MOAR  = blib/Perl6/ModuleLoader.moarvm
PERL6_W_MOAR   = blib/Perl6/World.moarvm
PERL6_G_MOAR   = blib/Perl6/Grammar.moarvm
PERL6_OPS_MOAR = blib/Perl6/Ops.moarvm
PERL6_A_MOAR   = blib/Perl6/Actions.moarvm
PERL6_O_MOAR   = blib/Perl6/Optimizer.moarvm
PERL6_P_MOAR   = blib/Perl6/Pod.moarvm
PERL6_C_MOAR   = blib/Perl6/Compiler.moarvm
PERL6_M_MOAR   = blib/Perl6/Metamodel.moarvm
PERL6_B_MOAR   = blib/Perl6/BOOTSTRAP.moarvm
SETTING_MOAR   = CORE.setting.moarvm

PERL6_OPS_DIR  = dynext
PERL6_OPS_DLL  = $(PERL6_OPS_DIR)/@perl6_ops_dll@
PERL6_OPS_OBJ  = $(PERL6_OPS_DIR)/perl6_ops@moar::obj@
PERL6_OPS_SRC  = src/vm/moar/ops/perl6_ops.c

$(PERL6_OPS_DLL): $(PERL6_OPS_SRC) Makefile
	$(CC) @moar::ccswitch@ @moar::ccshared@ $(CFLAGS) -I$(PREFIX)/include/libatomic_ops \
	    -I$(PREFIX)/include/dyncall -I$(PREFIX)/include/linenoise -I$(PREFIX)/include/moar \
	    -I$(PREFIX)/include/sha1 -I$(PREFIX)/include/tinymt  -I$(PREFIX)/include/libtommath \
	    -I$(PREFIX)/include/libuv @moar::ccout@$(PERL6_OPS_OBJ) $(PERL6_OPS_SRC)
	$(LD) @moar::ldswitch@ @moar::ldshared@ $(LDFLAGS) @moar::ldout@ $(PERL6_OPS_DLL) $(PERL6_OPS_OBJ)

PERL6_LANG_OUTPUT = \
    $(PERL6_ML_MOAR) $(PERL6_W_MOAR) $(PERL6_G_MOAR) $(PERL6_OPS_MOAR) \
    $(PERL6_A_MOAR) $(PERL6_O_MOAR) $(PERL6_P_MOAR) $(PERL6_C_MOAR) \
    $(PERL6_M_MOAR) $(PERL6_B_MOAR)

METAMODEL_SOURCES = \
  src/Perl6/Metamodel/Archetypes.nqp \
  src/Perl6/Metamodel/Naming.nqp \
  src/Perl6/Metamodel/Documenting.nqp \
  src/Perl6/Metamodel/Stashing.nqp \
  src/Perl6/Metamodel/Versioning.nqp \
  src/Perl6/Metamodel/TypePretense.nqp \
  src/Perl6/Metamodel/MethodDelegation.nqp \
  src/Perl6/Metamodel/BoolificationProtocol.nqp \
  src/Perl6/Metamodel/PackageHOW.nqp \
  src/Perl6/Metamodel/ModuleHOW.nqp \
  src/Perl6/Metamodel/GenericHOW.nqp \
  src/Perl6/Metamodel/AttributeContainer.nqp \
  src/Perl6/Metamodel/MethodContainer.nqp \
  src/Perl6/Metamodel/PrivateMethodContainer.nqp \
  src/Perl6/Metamodel/MultiMethodContainer.nqp \
  src/Perl6/Metamodel/RoleContainer.nqp \
  src/Perl6/Metamodel/MultipleInheritance.nqp \
  src/Perl6/Metamodel/DefaultParent.nqp \
  src/Perl6/Metamodel/BaseType.nqp \
  src/Perl6/Metamodel/C3MRO.nqp \
  src/Perl6/Metamodel/MROBasedMethodDispatch.nqp \
  src/Perl6/Metamodel/MROBasedTypeChecking.nqp \
  src/Perl6/Metamodel/Trusting.nqp \
  src/Perl6/Metamodel/Mixins.nqp \
  src/Perl6/Metamodel/BUILDPLAN.nqp \
  src/Perl6/Metamodel/REPRComposeProtocol.nqp \
  src/Perl6/Metamodel/InvocationProtocol.nqp \
  src/Perl6/Metamodel/RolePunning.nqp \
  src/Perl6/Metamodel/ArrayType.nqp \
  src/Perl6/Metamodel/RoleToRoleApplier.nqp \
  src/Perl6/Metamodel/ConcreteRoleHOW.nqp \
  src/Perl6/Metamodel/CurriedRoleHOW.nqp \
  src/Perl6/Metamodel/ParametricRoleHOW.nqp \
  src/Perl6/Metamodel/ParametricRoleGroupHOW.nqp \
  src/Perl6/Metamodel/RoleToClassApplier.nqp \
  src/Perl6/Metamodel/ClassHOW.nqp \
  src/Perl6/Metamodel/GrammarHOW.nqp \
  src/Perl6/Metamodel/NativeHOW.nqp \
  src/Perl6/Metamodel/SubsetHOW.nqp \
  src/Perl6/Metamodel/EnumHOW.nqp \
  src/Perl6/Metamodel/ContainerDescriptor.nqp \
  src/Perl6/Metamodel/Dispatchers.nqp \

BOOTSTRAP_SOURCES = \
  src/Perl6/Metamodel/BOOTSTRAP.nqp \
  src/Perl6/Metamodel/EXPORTHOW.nqp \

# The ordering here is important for bootstrapping reasons. In general:
# * traits almost certainly have to come first
# * stubs have to come after traits since they use them
# * Attribute needs to come before anything that uses an attribute
# We break various other circularities in Perl6::Metamodel::BOOTSTRAP.
# Note that you only really have to worry especially about things that
# the compiler will instantiate/call methods on while compiling the
# setting - basically anything that feels MOP-ish.
CORE_SOURCES = \
  src/core/core_prologue.pm \
  src/core/traits.pm \
  src/core/Positional.pm \
  src/core/Associative.pm \
  src/core/Callable.pm \
  src/core/natives.pm \
  src/core/stubs.pm \
  src/core/control.pm \
  src/core/Mu.pm \
  src/core/Stringy.pm \
  src/core/Any.pm \
  src/core/array_slice.pm \
  src/core/hash_slice.pm \
  src/core/Scalar.pm \
  src/core/Code.pm \
  src/core/WhateverCode.pm \
  src/core/Block.pm \
  src/core/Attribute.pm \
  src/core/Variable.pm \
  src/core/Routine.pm \
  src/core/Sub.pm \
  src/core/Macro.pm \
  src/core/Method.pm \
  src/core/Submethod.pm \
  src/core/Junction.pm \
  src/core/Cool.pm \
  src/core/Enumeration.pm \
  src/core/Whatever.pm \
  src/core/Bool.pm \
  src/core/Numeric.pm \
  src/core/Real.pm \
  src/core/Int.pm \
  src/core/Order.pm \
  src/core/UInt64.pm \
  src/core/Num.pm \
  src/core/Buf.pm \
  src/core/Str.pm \
  src/core/Capture.pm \
  src/core/Parcel.pm \
  src/core/Iterable.pm \
  src/core/Iterator.pm \
  src/core/Nil.pm \
  src/core/Range.pm \
  src/core/ListIter.pm \
  src/core/MapIter.pm \
  src/core/GatherIter.pm \
  src/core/List.pm \
  src/core/LoL.pm \
  src/core/Array.pm \
  src/core/Enum.pm \
  src/core/Pair.pm \
  src/core/HashIter.pm \
  src/core/EnumMap.pm \
  src/core/Hash.pm \
  src/core/Stash.pm \
  src/core/PseudoStash.pm \
  src/core/Parameter.pm \
  src/core/Signature.pm \
  src/core/Rational.pm \
  src/core/Rat.pm \
  src/core/Complex.pm \
  src/core/Backtrace.pm \
  src/core/Exception.pm \
  src/core/Failure.pm \
  src/core/Match.pm \
  src/core/Cursor.pm \
  src/core/Grammar.pm \
  src/core/Regex.pm \
  src/core/IO/Spec/Unix.pm \
  src/core/IO/Spec/Win32.pm \
  src/core/IO/Spec/Cygwin.pm \
  src/core/IO/Spec.pm \
  src/core/IO.pm \
  src/core/IO/ArgFiles.pm \
  src/core/AST.pm \
  src/core/CallFrame.pm \
  src/core/Main.pm \
  src/core/tai-utc.pm \
  src/core/Instant.pm \
  src/core/Duration.pm \
  src/core/Temporal.pm \
  src/core/EXPORTHOW.pm \
  src/core/Pod.pm \
  src/core/QuantHash.pm \
  src/core/Setty.pm \
  src/core/Set.pm \
  src/core/SetHash.pm \
  src/core/Baggy.pm \
  src/core/Bag.pm \
  src/core/BagHash.pm \
  src/core/Mixy.pm \
  src/core/Mix.pm \
  src/core/MixHash.pm \
  src/core/set_operators.pm \
  src/core/ObjAt.pm \
  src/core/Version.pm \
  src/core/ForeignCode.pm \
  src/core/operators.pm \
  src/core/metaops.pm \
  src/core/precedence.pm \
  src/core/terms.pm \
  src/core/Deprecations.pm \
  src/core/IO/Socket.pm \
  src/core/IO/Socket/INET.pm \
  src/core/core_epilogue.pm \

CLEANUPS = \
  *.manifest \
  blib/Perl6/*.moarvm \
  $(SETTING_MOAR) \
  $(PERL6_MOAR) \
  lib/Test.moarvm \
  lib/lib.moarvm \
  lib/Pod/To/Text.moarvm \
  blib/Test.moarvm \
  blib/lib.moarvm \
  blib/Pod/To/Text.moarvm \
  rakudo_test_run.tar.gz \
  src/gen/CORE.setting \
  src/gen/*.moarvm \
  src/gen/*.pm \
  $(RUNTIME_MOAR) \
  $(RUNNER)

HARNESS_WITH_FUDGE = $(PERL) t/harness --fudge --keep-exit-code
HARNESS = $(PERL) t/harness

all: $(PERL6_MOAR) $(SETTING_MOAR) $(RUNNER) blib/Test.moarvm blib/lib.moarvm blib/Pod/To/Text.moarvm

$(PERL6_ML_MOAR): src/Perl6/ModuleLoader.nqp src/vm/moar/ModuleLoaderVMConfig.nqp
	$(PERL) $(GEN_CAT) src/vm/moar/ModuleLoaderVMConfig.nqp src/Perl6/ModuleLoader.nqp > src/gen/ModuleLoader.nqp
	$(NQP) --target=mbc --output=$(PERL6_ML_MOAR) --encoding=utf8 \
	    src/gen/ModuleLoader.nqp

$(PERL6_W_MOAR): $(PERL6_ML_MOAR) src/Perl6/World.nqp
	$(NQP) --target=mbc --output=$(PERL6_W_MOAR) --encoding=utf8 \
	    src/Perl6/World.nqp

$(PERL6_P_MOAR): src/Perl6/Pod.nqp
	$(NQP) --target=mbc --output=$(PERL6_P_MOAR) --encoding=utf8 \
	    src/Perl6/Pod.nqp

$(PERL6_OPS_MOAR): src/vm/moar/Perl6/Ops.nqp
	$(NQP) --target=mbc --output=$(PERL6_OPS_MOAR) --encoding=utf8 \
	    src/vm/moar/Perl6/Ops.nqp

$(PERL6_A_MOAR): src/Perl6/Actions.nqp $(PERL6_P_MOAR) $(PERL6_OPS_MOAR)
	$(NQP) --target=mbc --output=$(PERL6_A_MOAR) --encoding=utf8 \
	    src/Perl6/Actions.nqp

$(PERL6_G_MOAR): src/Perl6/Grammar.nqp $(PERL6_W_MOAR) $(PERL6_A_MOAR) $(PERL6_P_MOAR)
	$(NQP) --target=mbc --output=$(PERL6_G_MOAR) --encoding=utf8 \
	    src/Perl6/Grammar.nqp

$(PERL6_O_MOAR): src/Perl6/Optimizer.nqp $(PERL6_OPS_MOAR)
	$(NQP) --target=mbc --output=$(PERL6_O_MOAR) --encoding=utf8 \
	    src/Perl6/Optimizer.nqp

$(PERL6_C_MOAR): src/Perl6/Compiler.nqp $(PERL6_O_MOAR)
	$(NQP) --target=mbc --output=$(PERL6_C_MOAR) --encoding=utf8 \
	    src/Perl6/Compiler.nqp

$(PERL6_MOAR): src/main.nqp $(PERL6_G_MOAR) $(PERL6_A_MOAR) $(PERL6_C_MOAR) $(PERL6_P_MOAR)
	$(PERL) tools/build/gen-version.pl > src/gen/main-version.nqp
	$(PERL) $(GEN_CAT) src/main.nqp src/gen/main-version.nqp > src/gen/main.nqp
	$(NQP) --target=mbc --output=$(PERL6_MOAR) \
	    src/gen/main.nqp

$(PERL6_M_MOAR): $(METAMODEL_SOURCES) $(PERL6_OPS_MOAR)
	$(PERL) $(GEN_CAT) $(METAMODEL_SOURCES) > src/gen/Metamodel.nqp
	$(NQP) --target=mbc --output=$(PERL6_M_MOAR) --encoding=utf8 \
	    src/gen/Metamodel.nqp

$(PERL6_B_MOAR): $(BOOTSTRAP_SOURCES) $(PERL6_M_MOAR)
	$(PERL) $(GEN_CAT) $(BOOTSTRAP_SOURCES) > src/gen/BOOTSTRAP.nqp
	$(NQP) --target=mbc --output=$(PERL6_B_MOAR) --encoding=utf8 \
        src/gen/BOOTSTRAP.nqp

$(SETTING_MOAR): $(PERL6_MOAR) $(PERL6_B_MOAR) $(CORE_SOURCES)
	$(PERL) $(GEN_CAT) $(CORE_SOURCES) > src/gen/CORE.setting
	@echo "The following step can take a long time, please be patient."
	$(RUN_PERL6) --setting=NULL --optimize=3 --target=mbc --stagestats --output=$(SETTING_MOAR) src/gen/CORE.setting

$(RUNNER):
	$(PERL) tools/build/create-moar-runner.pl dev . $(PREFIX)

##  testing targets
blib/Test.moarvm: lib/Test.pm $(PERL6_MOAR) $(SETTING_MOAR) $(RUNNER)
	.@slash@$(RUNNER) --target=mbc --output=blib/Test.moarvm lib/Test.pm

blib/lib.moarvm: lib/lib.pm6 $(PERL6_MOAR) $(SETTING_MOAR) $(RUNNER)
	.@slash@$(RUNNER) --target=mbc --output=blib/lib.moarvm lib/lib.pm6

blib/Pod/To/Text.moarvm: lib/Pod/To/Text.pm $(PERL6_MOAR) $(SETTING_MOAR) $(RUNNER)
	$(MKPATH) blib/Pod/To
	.@slash@$(RUNNER) --target=mbc --output=blib/Pod/To/Text.moarvm lib/Pod/To/Text.pm

test    : coretest

fulltest: coretest stresstest

coretest: all
	$(HARNESS) t/00-parrot t/01-sanity

# Run the spectests that we know work.
spectest_regression: spectest
spectest: testable t/spectest.data
	$(HARNESS_WITH_FUDGE) --tests-from-file=t/spectest.data

spectest_full: testable
	$(HARNESS_WITH_FUDGE) t/spec

quicktest: testable t/spectest.data
	$(HARNESS_WITH_FUDGE) --tests-from-file=t/spectest.data --long=0

stresstest: testable t/spectest.data
	$(HARNESS_WITH_FUDGE) --tests-from-file=t/spectest.data --stress=1

spectest_checkout : t/spec
t/spec :
	git clone git://github.com/perl6/roast.git t/spec
	-cd t/spec/ && git config remote.origin.pushurl git@github.com:perl6/roast.git

spectest_update :
	-cd t/spec && git pull

rakudo_test_run.tar.gz: testable t/spectest.data
	- $(HARNESS_WITH_FUDGE) --tests-from-file=t/spectest.data --archive rakudo_test_run.tar.gz

#spectest_smolder: rakudo_test_run.tar.gz
#	./perl6 -e "shell qqx[git log -1 --pretty=format:%H].fmt(qq[curl -F architecture=@cpuarch@ -F platform=@osname@ -F revision=%s -F report_file=@rakudo_test_run.tar.gz -F username=parrot-autobot -F password=qa_rocks http://smolder.parrot.org/app/projects/process_add_report/5])"

testable : all spectest_checkout spectest_update

t/localtest.data:
	$(PERL) -MExtUtils::Command -e test_f $@

# Run the tests in t/localtest.data
localtest: all spectest_checkout t/localtest.data
	@$(HARNESS_WITH_FUDGE) --tests-from-file=t/localtest.data

# Run the tests in t/localtest.data with a higher verbosity
localtest_loud: all spectest_checkout t/localtest.data
	@$(HARNESS_WITH_FUDGE) --tests-from-file=t/localtest.data --verbosity=1

# Run many tests of your choice.
# make sometests TESTFILES=t/foo/bar
sometests: all
	@$(HARNESS_WITH_FUDGE) $(TESTFILES)

# Run a single test
t/*.t t/*/*.t t/*/*/*.t: all spectest_checkout
	@$(HARNESS_WITH_FUDGE) --verbosity=1 $@

install: all tools/build/create-moar-runner.pl
	$(MKPATH) $(PREFIX)/bin
	$(MKPATH) $(PERL6_LANG_DIR)/lib/Perl6
	$(MKPATH) $(PERL6_LANG_DIR)/runtime
	$(CP) $(PERL6_LANG_OUTPUT) $(PERL6_LANG_DIR)/lib/Perl6
	$(CP) $(SETTING_MOAR) $(PERL6_LANG_DIR)/runtime
	$(CP) $(PERL6_MOAR) $(PERL6_LANG_DIR)/runtime
	$(CP) $(RUNTIME_MOAR) $(PERL6_LANG_DIR)/runtime
	$(CP) blib/Test.moarvm $(PERL6_LANG_DIR)/lib
	$(CP) blib/lib.moarvm $(PERL6_LANG_DIR)/lib
	$(MKPATH) $(PERL6_LANG_DIR)/lib/Pod/To
	$(CP) blib/Pod/To/Text.moarvm $(PERL6_LANG_DIR)/lib/Pod/To
	$(PERL) tools/build/create-moar-runner.pl install $(PREFIX) $(PREFIX)

##  cleaning
clean:
	$(RM_F) $(CLEANUPS)
	$(RM_RF) bin

distclean: realclean

realclean: clean
	$(RM_F) Makefile

testclean:

# nqp::makefile <-- tells NQP::Configure to treat this file as a makefile,
#                   performing win32 slash and makefile conversions
