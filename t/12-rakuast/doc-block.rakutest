use v6.e.PREVIEW;
use Test;

plan 5;

my $ast;
my $deparsed;
my $raku;
sub ast(RakuAST::Node:D $node --> Nil) {
    $ast      := $node;
    $deparsed := $node.DEPARSE;
    $raku     := 'use experimental :rakuast; ' ~ $node.raku;
    diag $deparsed.chomp;
}

subtest 'simple documentation' => {
    # =begin doc␤This is documentation␤=end doc␤
    ast RakuAST::Doc::Block.new(
      type        => 'doc',
      paragraphs  => (
        RakuAST::StrLiteral.new("This is documentation"),
      )
    );
    for 'Str', $deparsed, 'Raku', $raku.EVAL.DEPARSE -> $type, $it {
        is-deeply $it, q:to/CODE/, "$type: deparse";
=begin doc
This is documentation
=end doc
CODE
    }
}

subtest 'simple documentation abbreviated' => {
    # =doc␤This is documentation␤␤
    ast RakuAST::Doc::Block.new(
      type        => 'doc',
      config      => { :abbreviated },
      paragraphs  => (
        RakuAST::StrLiteral.new("This is documentation"),
      )
    );
    for 'Str', $deparsed, 'Raku', $raku.EVAL.DEPARSE -> $type, $it {
        is-deeply $it, q:to/CODE/, "$type: deparse";
=doc
This is documentation

CODE
    }
}

subtest 'simple documentation with markup' => {
    # =begin doc␤This is B<doc>umentation␤=end doc␤
    ast RakuAST::Doc::Block.new(
      type        => 'doc',
      paragraphs  => (
        RakuAST::Doc::Paragraph.new(
          RakuAST::StrLiteral.new("This is "),
          RakuAST::Doc::Markup.new(
            letter => "B",
            atoms  => (
              RakuAST::StrLiteral.new("doc"),
            )
          ),
          RakuAST::StrLiteral.new("umentation"),
        ),
      )
    );
    for 'Str', $deparsed, 'Raku', $raku.EVAL.DEPARSE -> $type, $it {
        is-deeply $it, q:to/CODE/, "$type: deparse";
=begin doc
This is B<doc>umentation
=end doc
CODE
    }
}

subtest 'simple doc comment' => {
    # =begin comment␤This will not be rendered␤=end comment␤
    ast RakuAST::Doc::Verbatim.new(
      type  => 'comment',
      text  => RakuAST::StrLiteral.new("This will not be rendered"),
    );
    for 'Str', $deparsed, 'Raku', $raku.EVAL.DEPARSE -> $type, $it {
        is-deeply $it, q:to/CODE/, "$type: deparse";
=begin comment
This will not be rendered
=end comment
CODE
    }
}

subtest 'simple abbreviated doc comment' => {
    # =begin comment␤This will not be rendered␤=end comment␤
    ast RakuAST::Doc::Verbatim.new(
      type   => 'comment',
      config => { :abbreviated },
      text   => RakuAST::StrLiteral.new("This will not be rendered"),
    );
    for 'Str', $deparsed, 'Raku', $raku.EVAL.DEPARSE -> $type, $it {
        is-deeply $it, q:to/CODE/, "$type: deparse";
=comment
This will not be rendered

CODE
    }
}

# vim: expandtab shiftwidth=4
