use v6.e.PREVIEW;
use Test;

use RakuAST::Deparse::Highlight;

plan 7;

sub mapper(str $color, str $c) {
    $c.trim ?? "<$color>$c\</$color>" !! $c
}

my %mapping =
  black     => -> $c { mapper "black",   $c },
  blue      => -> $c { mapper "blue",    $c },
  cyan      => -> $c { mapper "cyan",    $c },
  green     => -> $c { mapper "green",   $c },
  magenta   => -> $c { mapper "magenta", $c },
  none      => -> $c { mapper "none",    $c },
  red       => -> $c { mapper "red",     $c },
  yellow    => -> $c { mapper "yellow",  $c },
  white     => -> $c { mapper "white",   $c },
;

sub is-highlighted(
  str $got,
  str $expected,
  str $comment,
     :$unsafe
) is test-assertion {
    diag highlight($got, "Text")
      unless is highlight($got, %mapping, :$unsafe), $expected, $comment;
}

for <nqp MONKEY MONKEY-GUTS Test> -> $name {
    throws-like { highlight("use $name") },
      X::NotAllowedHighlighting,
      what => $name eq 'Test' ?? "module loading" !! "use $name",
      "use $name not allowed";
}

is-highlighted Q:to/CODE/, Q:to/HIGHLIGHTED/, 'use and pass', :unsafe;
use Test;  # standard test library

pass "it's all ok";
CODE
<magenta>use</magenta> Test;<blue>  # standard test library</blue>

<yellow>pass</yellow> <red>"it's all ok"</red>
HIGHLIGHTED

is-highlighted Q:to/CODE/, Q:to/HIGHLIGHTED/, 'class and attributes';
use v6.d;  # fixate language version
use variables :D;
# The key to proper frobnication!
my class Frobnicate {
    has Str $.foo = "foo";
    has Int $.bar = 42;

    method zippo() { so $!foo + $.bar }
}

my Frobnicate $a .= new;
CODE
<green>use</green> <red>v6.d</red>;<blue>  # fixate language version</blue>
<green>use variables :D</green>;
<blue># The key to proper frobnication!</blue>
<magenta>my</magenta> <yellow>class</yellow> Frobnicate {
    <magenta>has</magenta> <green>Str</green> <cyan>$.foo</cyan> <yellow>=</yellow> <red>"foo"</red>;
    <magenta>has</magenta> <green>Int</green> <cyan>$.bar</cyan> <yellow>=</yellow> <red>42</red>;

    <yellow>method</yellow> zippo {

        <yellow><yellow>so</yellow> </yellow><cyan>$!foo</cyan> <yellow>+</yellow> <cyan>$.bar</cyan>
    }
}


<magenta>my</magenta> <green>Frobnicate</green> <cyan>$a</cyan> <yellow>.=</yellow> <yellow></yellow><yellow>new</yellow>
HIGHLIGHTED

is-highlighted Q:to/CODE/, Q:to/HIGHLIGHTED/, 'vars, if and say';
my Int $a = 42;
my str $b = "foo";

if $a == 42 && $b eq "foo" {
    say "a = $a, b = $b"
}
CODE
<magenta>my</magenta> <green>Int</green> <cyan>$a</cyan> <yellow>=</yellow> <red>42</red>;
<magenta>my</magenta> <green>str</green> <cyan>$b</cyan> <yellow>=</yellow> <red>"foo"</red>;
<yellow>if</yellow> <cyan>$a</cyan> <yellow>==</yellow> <red>42</red> <yellow>&&</yellow> <cyan>$b</cyan> <yellow>eq</yellow> <red>"foo"</red> {
    <yellow>say</yellow> <red>"a = <cyan>$a</cyan>, b = <cyan>$b</cyan>"</red>
}
HIGHLIGHTED

# vim: expandtab shiftwidth=4
