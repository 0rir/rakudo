use v6.e.PREVIEW;
use Test;

plan 17;

my $ast;
my $deparsed;
my $raku;
sub ast(RakuAST::Node:D $node --> Nil) {
    $ast      := $node;
    $deparsed := $node.DEPARSE;
    $raku     := 'use experimental :rakuast; ' ~ $node.raku;
    diag $deparsed.chomp;
}

subtest 'Simple leading and trailing pod declarator test' => {
    # #| leading comment␤sub a {␤#= trailing comment␤    42␤}
    ast RakuAST::Doc::Declarator.new(   # created from declarator's viewpoint
      WHEREFORE => RakuAST::Sub.new(
        name => RakuAST::Name.from-identifier("a"),
        body => RakuAST::Blockoid.new(
          RakuAST::StatementList.new(
            RakuAST::Statement::Expression.new(
              expression => RakuAST::IntLiteral.new(42)
            )
          )
        )
      ),
      leading => (
        RakuAST::StrLiteral.new("leading comment"),
      ),
      trailing => (
        RakuAST::StrLiteral.new("trailing comment"),
      )
    );

    for 'Str', $deparsed, 'Raku', $raku.EVAL.DEPARSE -> $type, $it {
        is-deeply $it, q:to/CODE/.chomp, "$type: deparse";
#| leading comment
sub a {
#= trailing comment
    42
}
CODE
    }
}

subtest 'Simple sub with leading and trailing pod test' => {
    # #| leading comment␤sub a {␤#= trailing comment␤    42␤}
    ast RakuAST::Sub.new(   # created from sub's viewpoint
      name => RakuAST::Name.from-identifier("a"),
      body => RakuAST::Blockoid.new(
        RakuAST::StatementList.new(
          RakuAST::Statement::Expression.new(
            expression => RakuAST::IntLiteral.new(42)
          )
        )
      ),
    ).declarator-docs(
      leading  => (
        RakuAST::StrLiteral.new("leading comment"),
      ),
      trailing => (
        RakuAST::StrLiteral.new("trailing comment"),
      )
    );

    for 'Str', $deparsed, 'Raku', $raku.EVAL.DEPARSE -> $type, $it {
        is-deeply $it, q:to/CODE/.chomp, "$type: deparse";
#| leading comment
sub a {
#= trailing comment
    42
}
CODE
    }
}

subtest 'Simple class with declarator pod' => {
    # #| leading comment␤class A {␤#= trailing comment␤}
    ast RakuAST::Package.new(
      declarator => "class",
      name       => RakuAST::Name.from-identifier("A"),
      body       => RakuAST::Block.new(
        body => RakuAST::Blockoid.new(
          RakuAST::StatementList.new()
        )
      )
    ).declarator-docs(
      leading  => (
        RakuAST::StrLiteral.new("leading comment"),
      ),
      trailing => (
        RakuAST::StrLiteral.new("trailing comment"),
      )
    );

    for 'Str', $deparsed, 'Raku', $raku.EVAL.DEPARSE -> $type, $it {
        is-deeply $it, q:to/CODE/.chomp, "$type: deparse";
#| leading comment
class A {
#= trailing comment
}
CODE
    }
}

subtest 'Simple class with declarator pod, one attribute' => {
    # class A {␤    #| leading comment␤    has $.foo␤    #= trailing comment␤}␤
    ast RakuAST::Package.new(
      declarator => "class",
      name       => RakuAST::Name.from-identifier("A"),
      body       => RakuAST::Block.new(
        body => RakuAST::Blockoid.new(
          RakuAST::StatementList.new(
            RakuAST::Statement::Expression.new(
              expression => RakuAST::VarDeclaration::Simple.new(
                scope => "has",
                name  => '$.foo'
              ).declarator-docs(
                leading  => (
                  RakuAST::StrLiteral.new("leading comment"),
                ),
                trailing => (
                  RakuAST::StrLiteral.new("trailing comment"),
                )
              )
            )
          )
        )
      ),
    );

    for 'Str', $deparsed, 'Raku', $raku.EVAL.DEPARSE -> $type, $it {
        is-deeply $it, q:to/CODE/, "$type: deparse";
class A {
    #| leading comment
    has $.foo
    #= trailing comment
}
CODE
    }
}

subtest 'Simple class with declarator pod, two attributes' => {
    # class A {␤    #| leading comment␤    has $.foo␤    #= trailing comment␤    has $.bar␤}␤
    ast RakuAST::Package.new(
      declarator => "class",
      name       => RakuAST::Name.from-identifier("A"),
      body       => RakuAST::Block.new(
        body => RakuAST::Blockoid.new(
          RakuAST::StatementList.new(
            RakuAST::Statement::Expression.new(
              expression => RakuAST::VarDeclaration::Simple.new(
                scope => "has",
                name  => '$.foo'
              ).declarator-docs(
                leading   => (
                  RakuAST::StrLiteral.new("leading comment"),
                ),
                trailing   => (
                  RakuAST::StrLiteral.new("trailing comment"),
                )
              )
            ),
            RakuAST::Statement::Expression.new(
              expression => RakuAST::VarDeclaration::Simple.new(
                scope => "has",
                name  => '$.bar'
              )
            )
          )
        )
      ),
    );

    for 'Str', $deparsed, 'Raku', $raku.EVAL.DEPARSE -> $type, $it {
        is-deeply $it, q:to/CODE/, "$type: deparse";
class A {
    #| leading comment
    has $.foo
    #= trailing comment
    has $.bar
}
CODE
    }
}

subtest 'Simple class with declarator pod, one method' => {
    # class A {␤    #| leading comment␤    method foo() { }␤    #= trailing comment␤}␤
    ast RakuAST::Package.new(
      declarator => "class",
      name       => RakuAST::Name.from-identifier("A"),
      body       => RakuAST::Block.new(
        body => RakuAST::Blockoid.new(
          RakuAST::StatementList.new(
            RakuAST::Statement::Expression.new(
              expression => RakuAST::Method.new(
                name => RakuAST::Name.from-identifier("foo"),
                body => RakuAST::Blockoid.new(
                  RakuAST::StatementList.new()
                )
              ).declarator-docs(
                leading  => (
                  RakuAST::StrLiteral.new("leading comment"),
                ),
                trailing => (
                  RakuAST::StrLiteral.new("trailing comment"),
                )
              )
            )
          )
        )
      )
    );

    for 'Str', $deparsed, 'Raku', $raku.EVAL.DEPARSE -> $type, $it {
        is-deeply $it, q:to/CODE/, "$type: deparse";
class A {
    #| leading comment
    method foo {
    #= trailing comment
    }
}
CODE
    }
}

subtest 'Simple class with declarator pod, one submethod' => {
    # class A {␤    #| leading comment␤    submethod foo() { }␤    #= trailing comment␤}␤
    ast RakuAST::Package.new(
      declarator => "class",
      name       => RakuAST::Name.from-identifier("A"),
      body       => RakuAST::Block.new(
        body => RakuAST::Blockoid.new(
          RakuAST::StatementList.new(
            RakuAST::Statement::Expression.new(
              expression => RakuAST::Submethod.new(
                name => RakuAST::Name.from-identifier("foo"),
                body => RakuAST::Blockoid.new(
                  RakuAST::StatementList.new()
                )
              ).declarator-docs(
                leading  => (
                  RakuAST::StrLiteral.new("leading comment"),
                ),
                trailing => (
                  RakuAST::StrLiteral.new("trailing comment"),
                )
              )
            )
          )
        )
      )
    );

    for 'Str', $deparsed, 'Raku', $raku.EVAL.DEPARSE -> $type, $it {
        is-deeply $it, q:to/CODE/, "$type: deparse";
class A {
    #| leading comment
    submethod foo {
    #= trailing comment
    }
}
CODE
    }
}

subtest 'Simple class with declarator pod, one private method' => {
    # class A {␤    #| leading comment␤    method !foo() { }␤    #= trailing comment␤}␤
    ast RakuAST::Package.new(
      declarator => "class",
      name       => RakuAST::Name.from-identifier("A"),
      body       => RakuAST::Block.new(
        body => RakuAST::Blockoid.new(
          RakuAST::StatementList.new(
            RakuAST::Statement::Expression.new(
              expression => RakuAST::Method.new(
                name    => RakuAST::Name.from-identifier("foo"),
                body    => RakuAST::Blockoid.new(
                  RakuAST::StatementList.new()
                ),
                private => True
              ).declarator-docs(
                leading  => (
                  RakuAST::StrLiteral.new("leading comment"),
                ),
                trailing => (
                  RakuAST::StrLiteral.new("trailing comment"),
                )
              )
            )
          )
        )
      )
    );

    for 'Str', $deparsed, 'Raku', $raku.EVAL.DEPARSE -> $type, $it {
        is-deeply $it, q:to/CODE/, "$type: deparse";
class A {
    #| leading comment
    method !foo {
    #= trailing comment
    }
}
CODE
    }
}

subtest 'Simple class with declarator pod, one meta method' => {
    # class A {␤    #| leading comment␤    method ^foo() { }␤    #= trailing comment␤}␤
    ast RakuAST::Package.new(
      declarator => "class",
      name       => RakuAST::Name.from-identifier("A"),
      body       => RakuAST::Block.new(
        body => RakuAST::Blockoid.new(
          RakuAST::StatementList.new(
            RakuAST::Statement::Expression.new(
              expression => RakuAST::Method.new(
                name => RakuAST::Name.from-identifier("foo"),
                body => RakuAST::Blockoid.new(
                  RakuAST::StatementList.new()
                ),
                meta => True
              ).declarator-docs(
                leading  => (
                  RakuAST::StrLiteral.new("leading comment"),
                ),
                trailing => (
                  RakuAST::StrLiteral.new("trailing comment"),
                )
              )
            )
          )
        )
      )
    );

    for 'Str', $deparsed, 'Raku', $raku.EVAL.DEPARSE -> $type, $it {
        is-deeply $it, q:to/CODE/, "$type: deparse";
class A {
    #| leading comment
    method ^foo {
    #= trailing comment
    }
}
CODE
    }
}

subtest 'Simple class with declarator pod, two methods' => {
    # class A {␤    #| leading comment␤    method foo() {␤    #= trailing comment␤    }␤    method bar { }␤}␤
    ast RakuAST::Package.new(
      declarator => "class",
      name       => RakuAST::Name.from-identifier("A"),
      body       => RakuAST::Block.new(
        body => RakuAST::Blockoid.new(
          RakuAST::StatementList.new(
            RakuAST::Statement::Expression.new(
              expression => RakuAST::Method.new(
                name => RakuAST::Name.from-identifier("foo"),
                body => RakuAST::Blockoid.new(
                  RakuAST::StatementList.new()
                )
              ).declarator-docs(
                leading  => (
                  RakuAST::StrLiteral.new("leading comment"),
                ),
                trailing => (
                  RakuAST::StrLiteral.new("trailing comment"),
                )
              )
            ),
            RakuAST::Statement::Expression.new(
              expression => RakuAST::Method.new(
                name => RakuAST::Name.from-identifier("bar"),
                body => RakuAST::Blockoid.new(
                  RakuAST::StatementList.new()
                )
              )
            )
          )
        )
      )
    );

    for 'Str', $deparsed, 'Raku', $raku.EVAL.DEPARSE -> $type, $it {
        is-deeply $it, q:to/CODE/, "$type: deparse";
class A {
    #| leading comment
    method foo {
    #= trailing comment
    }
    method bar { }
}
CODE
    }
}

subtest 'Simple enum with declarator pod' => {
    # #| leading comment␤enum Foo <A B C>␤#= trailing comment
    ast RakuAST::Type::Enum.new(
      name => RakuAST::Name.from-identifier("Foo"),
      term => RakuAST::QuotedString.new(
        processors => <words val>,
        segments   => (
          RakuAST::StrLiteral.new("A B C"),
        )
      )
    ).declarator-docs(
      leading  => (
        RakuAST::StrLiteral.new("leading comment"),
      ),
      trailing => (
        RakuAST::StrLiteral.new("trailing comment"),
      )
    );

    for 'Str', $deparsed, 'Raku', $raku.EVAL.DEPARSE -> $type, $it {
        is-deeply $it, q:to/CODE/.chomp, "$type: deparse";
#| leading comment
enum Foo <A B C>
#= trailing comment
CODE
    }
}

subtest 'Simple subset with declarator pod' => {
    # #| leading comment␤subset Foo of Int␤#= trailing comment
    ast RakuAST::Type::Subset.new(
      name => RakuAST::Name.from-identifier("Foo"),
      of   => RakuAST::Trait::Of.new(
        RakuAST::Type::Simple.new(
          RakuAST::Name.from-identifier("Int")
        )
      )
    ).declarator-docs(
      leading  => (
        RakuAST::StrLiteral.new("leading comment"),
      ),
      trailing => (
        RakuAST::StrLiteral.new("trailing comment"),
      )
    );

    for 'Str', $deparsed, 'Raku', $raku.EVAL.DEPARSE -> $type, $it {
        is-deeply $it, q:to/CODE/.chomp, "$type: deparse";
#| leading comment
subset Foo of Int
#= trailing comment
CODE
    }
}

subtest 'Simple regex with declarator pod' => {
    # #| leading comment␤my regex foo {␤#= trailing comment␤bar }
    ast RakuAST::RegexDeclaration.new(
      scope => "my",
      name  => RakuAST::Name.from-identifier("foo"),
      body  => RakuAST::Regex::Sequence.new(
        RakuAST::Regex::WithWhitespace.new(
          RakuAST::Regex::Literal.new("bar")
        )
      )
    ).declarator-docs(
      leading  => (
        RakuAST::StrLiteral.new("leading comment"),
      ),
      trailing => (
        RakuAST::StrLiteral.new("trailing comment"),
      )
    );

    for 'Str', $deparsed, 'Raku', $raku.EVAL.DEPARSE -> $type, $it {
        is-deeply $it, q:to/CODE/.chomp, "$type: deparse";
#| leading comment
my regex foo {
#= trailing comment
bar }
CODE
    }
}

subtest 'Sub with declarator pod on parameter (1)' => {
    # sub a (␤#| leading comment␤$b␤#= trailing comment␤) { }␤
    ast RakuAST::Sub.new(
      name      => RakuAST::Name.from-identifier("a"),
      signature => RakuAST::Signature.new(
        parameters => (
          RakuAST::Parameter.new(
            target => RakuAST::ParameterTarget::Var.new("\$b")
          ).declarator-docs(
            leading  => (
              RakuAST::StrLiteral.new("leading comment"),
            ),
            trailing => (
              RakuAST::StrLiteral.new("trailing comment"),
            )
          ),
        )
      ),
      body      => RakuAST::Blockoid.new(
        RakuAST::StatementList.new()
      )
    );

    for 'Str', $deparsed, 'Raku', $raku.EVAL.DEPARSE -> $type, $it {
        is-deeply $it, q:to/CODE/.chomp, "$type: deparse";
sub a (
#| leading comment
$b
#= trailing comment
) { }
CODE
    }
}

subtest 'Sub with declarator pod on parameter (2)' => {
    # sub a (␤#| leading comment␤$b␤#= trailing comment␤␤$c,) { }␤
    ast RakuAST::Sub.new(
      name      => RakuAST::Name.from-identifier("a"),
      signature => RakuAST::Signature.new(
        parameters => (
          RakuAST::Parameter.new(
            target => RakuAST::ParameterTarget::Var.new('$b')
          ).declarator-docs(
            leading  => (
              RakuAST::StrLiteral.new("leading comment"),
            ),
            trailing => (
              RakuAST::StrLiteral.new("trailing comment"),
            )
          ),
          RakuAST::Parameter.new(
            target => RakuAST::ParameterTarget::Var.new('$c')
          )
        )
      ),
      body      => RakuAST::Blockoid.new(
        RakuAST::StatementList.new()
      )
    );

    for 'Str', $deparsed, 'Raku', $raku.EVAL.DEPARSE -> $type, $it {
        is-deeply $it, q:to/CODE/.chomp, "$type: deparse";
sub a (
#| leading comment
$b,
#= trailing comment
$c) { }
CODE
    }
}

subtest 'Sub with declarator pod on parameter (3)' => {
    # sub a (␤#| leading comment␤$b, $c) { }␤
    ast RakuAST::Sub.new(
      name      => RakuAST::Name.from-identifier("a"),
      signature => RakuAST::Signature.new(
        parameters => (
          RakuAST::Parameter.new(
            target => RakuAST::ParameterTarget::Var.new('$b'),
            WHY => RakuAST::Doc::Declarator.new(
              leading   => (
                RakuAST::StrLiteral.new("leading comment"),
              )
            )
          ),
          RakuAST::Parameter.new(
            target => RakuAST::ParameterTarget::Var.new('$c'),
            WHY => RakuAST::Doc::Declarator.new(
              leading   => (
                RakuAST::StrLiteral.new("leading comment"),
              )
            )
          )
        )
      ),
      body      => RakuAST::Blockoid.new(
        RakuAST::StatementList.new()
      )
    );

    for 'Str', $deparsed, 'Raku', $raku.EVAL.DEPARSE -> $type, $it {
        is-deeply $it, q:to/CODE/.chomp, "$type: deparse";
sub a (
#| leading comment
$b,
#| leading comment
$c) { }
CODE
    }
}

subtest 'Sub with declarator pod on parameter (4)' => {
    # #| leadin sub␤sub a (␤#= trailing sub␤#| leading param␤$b␤#=trailing param␤) { }
    ast RakuAST::Sub.new(
      name      => RakuAST::Name.from-identifier("a"),
      signature => RakuAST::Signature.new(
        parameters => (
          RakuAST::Parameter.new(
            target => RakuAST::ParameterTarget::Var.new('$b')
          ).declarator-docs(
            leading  => (
              RakuAST::StrLiteral.new("leading param"),
            ),
            trailing => (
              RakuAST::StrLiteral.new("trailing param"),
            )
          )
        )
      ),
      body      => RakuAST::Blockoid.new(
        RakuAST::StatementList.new()
      )
    ).declarator-docs(
      leading  => (
        RakuAST::StrLiteral.new("leading sub"),
      ),
      trailing => (
        RakuAST::StrLiteral.new("trailing sub"),
      )
    );

    for 'Str', $deparsed, 'Raku', $raku.EVAL.DEPARSE -> $type, $it {
        is-deeply $it, q:to/CODE/.chomp, "$type: deparse";
#| leading sub
sub a (
#= trailing sub
#| leading param
$b
#= trailing param
) { }
CODE
    }
}

# vim: expandtab shiftwidth=4
