use v6.e.PREVIEW;
use Test;

plan 2;

my $ast;
my $deparsed;
my $raku;
sub ast(RakuAST::Node:D $node --> Nil) {
    $ast      := $node;
    $deparsed := $node.DEPARSE;
    $raku     := 'use experimental :rakuast; ' ~ $node.raku;
    diag $deparsed.chomp;
}

subtest 'Simple leading and trailing pod declarator test' => {
    # #| leading comment␤sub a { 42 }␤#= trailing comment
    ast RakuAST::Doc::Declarator.new(
      WHEREFORE => RakuAST::Sub.new(
        name => RakuAST::Name.from-identifier("a"),
        body => RakuAST::Blockoid.new(
          RakuAST::StatementList.new(
            RakuAST::Statement::Expression.new(
              expression => RakuAST::IntLiteral.new(42)
            )
          )
        )
      ),
      leading => (
        RakuAST::StrLiteral.new("leading comment"),
      ),
      trailing => (
        RakuAST::StrLiteral.new("trailing comment"),
      )
    );

    for 'Str', $deparsed, 'Raku', $raku.EVAL.DEPARSE -> $type, $it {
        is-deeply $it, q:to/CODE/.chomp, "$type: deparse";
#| leading comment
sub a { 42 }
#= trailing comment
CODE
    }
}

subtest 'Simple class with declarator pod' => {
    # #| leading comment␤class A { }␤#= trailing comment
    ast RakuAST::Package.new(
      declarator => "class",
      name       => RakuAST::Name.from-identifier("A"),
      body       => RakuAST::Block.new(
        body => RakuAST::Blockoid.new(
          RakuAST::StatementList.new()
        )
      ),
      WHY => RakuAST::Doc::Declarator.new(
        leading   => (
          RakuAST::StrLiteral.new("leading comment"),
        ),
        trailing   => (
          RakuAST::StrLiteral.new("trailing comment"),
        )
      )
    );

    for 'Str', $deparsed, 'Raku', $raku.EVAL.DEPARSE -> $type, $it {
        is-deeply $it, q:to/CODE/.chomp, "$type: deparse";
#| leading comment
class A { }
#= trailing comment
CODE
    }
}

# vim: expandtab shiftwidth=4
