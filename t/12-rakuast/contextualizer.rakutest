use MONKEY-SEE-NO-EVAL;
use experimental :rakuast;
use Test;

plan 4;

my $ast;
my $deparsed;
my @type = <AST Str>;
sub ast(RakuAST::Node:D $node --> Nil) {
    $ast      := $node;
    $deparsed := $ast.DEPARSE;
    diag $deparsed.chomp;
}

subtest 'Hash contextualizer from empty sequence' => {
    # %()
    ast RakuAST::Contextualizer::Hash.new(RakuAST::StatementSequence.new());
    is-deeply $deparsed, '%()', 'deparse';

    for 'AST', EVAL($ast), 'Str', EVAL($deparsed) -> $type, $result {
        is-deeply $result, Hash.new(),
          "$type: Contextualizer gives expected result";
    }
}

subtest 'List contextualizer from empty sequence' => {
    # @()
    ast RakuAST::Contextualizer::List.new(RakuAST::StatementSequence.new());
    is-deeply $deparsed, '@()', 'deparse';

    for 'AST', EVAL($ast), 'Str', EVAL($deparsed) -> $type, $result {
        is-deeply $result, List.new(),
          "$type: Contextualizer gives expected result";
    }
}

subtest 'Hash contextualizer from pairs' => {
    # %(a => 1, b => 2)
    ast RakuAST::Contextualizer::Hash.new(
        RakuAST::StatementSequence.new(
            RakuAST::Statement::Expression.new(
                expression => RakuAST::ApplyListInfix.new(
                    infix => RakuAST::Infix.new(','),
                    operands => [
                        RakuAST::FatArrow.new(key => 'a', value => RakuAST::IntLiteral.new(1)),
                        RakuAST::FatArrow.new(key => 'b', value => RakuAST::IntLiteral.new(2))
                    ]
                )
            )
        )
    );
    is-deeply $deparsed, '%(a => 1, b => 2)', 'deparse';

    for 'AST', EVAL($ast), 'Str', EVAL($deparsed) -> $type, $result {
        is-deeply $result, Hash.new((a => 1, b => 2)),
          "$type: Contextualizer gives expected result";
    }
}

subtest 'List contextualizer from pairs' => {
    # @(a => 1, b => 2)
    ast RakuAST::Contextualizer::List.new(
        RakuAST::StatementSequence.new(
            RakuAST::Statement::Expression.new(
                expression => RakuAST::ApplyListInfix.new(
                    infix => RakuAST::Infix.new(','),
                    operands => [
                        RakuAST::FatArrow.new(key => 'a', value => RakuAST::IntLiteral.new(1)),
                        RakuAST::FatArrow.new(key => 'b', value => RakuAST::IntLiteral.new(2))
                    ]
                )
            )
        )
    );
    is-deeply $deparsed, '@(a => 1, b => 2)', 'deparse';

    for 'AST', EVAL($ast), 'Str', EVAL($deparsed) -> $type, $result {
        is-deeply $result, (a => 1, b => 2),
          "$type: Contextualizer gives expected result";
    }
}

# vim: expandtab shiftwidth=4
