use v6.e.PREVIEW;
use Test;

plan 7;

my $ast;
my $deparsed;
my $raku;
my @type = <AST Str Raku>;
sub ast(RakuAST::Node:D $node --> Nil) {
    $ast      := $node;
    $deparsed := $node.DEPARSE;
    $raku     := 'use experimental :rakuast; ' ~ $node.raku;
    diag $deparsed.chomp;
}

subtest 'type with definedness constraint' => {
    # Int:D
    ast RakuAST::Type::Definedness.new(
      base-type => RakuAST::Type::Simple.new(
        RakuAST::Name.from-identifier("Int")
      ),
      definite  => True
    );
    is-deeply $deparsed, 'Int:D', 'deparse';

    is-deeply $_, Int:D, @type[$++]
      for EVAL($ast), EVAL($deparsed), EVAL(EVAL $raku);
}

subtest 'type with undefinedness constraint' => {
    # Int:U
    ast RakuAST::Type::Definedness.new(
      base-type => RakuAST::Type::Simple.new(
        RakuAST::Name.from-identifier("Int")
      ),
      definite  => False
    );
    is-deeply $deparsed, 'Int:U', 'deparse';

    is-deeply $_, Int:U, @type[$++]
      for EVAL($ast), EVAL($deparsed), EVAL(EVAL $raku);
}

subtest 'type with unspecified coercion' => {
    # Int()
    ast RakuAST::Type::Coercion.new(
      base-type  => RakuAST::Type::Simple.new(
        RakuAST::Name.from-identifier("Int")
      ),
    );
    is-deeply $deparsed, 'Int()', 'deparse';

    is-deeply $_, Int(), @type[$++]
      for EVAL($ast), EVAL($deparsed), EVAL(EVAL $raku);
}

subtest 'type with specific coercion' => {
    # Int(Str)
    ast RakuAST::Type::Coercion.new(
      base-type  => RakuAST::Type::Simple.new(
        RakuAST::Name.from-identifier("Int")
      ),
      constraint => RakuAST::Type::Setting.new(
        RakuAST::Name.from-identifier("Str")
      )
    );
    is-deeply $deparsed, 'Int(Str)', 'deparse';

    is-deeply $_, Int(Str), @type[$++]
      for EVAL($ast), EVAL($deparsed), EVAL(EVAL $raku);
}

subtest 'type with chained coercion' => {
    # Int(Str())
    ast RakuAST::Type::Coercion.new(
      base-type  => RakuAST::Type::Simple.new(
        RakuAST::Name.from-identifier("Int")
      ),
      constraint => RakuAST::Type::Coercion.new(
        base-type => RakuAST::Type::Simple.new(
          RakuAST::Name.from-identifier("Str")
        )
      )
    );
    is-deeply $deparsed, 'Int(Str())', 'deparse';

    is-deeply $_, Int(Str()), @type[$++]
      for EVAL($ast), EVAL($deparsed), EVAL(EVAL $raku);
}

subtest 'parameterized type without type' => {
    # Rational[]
    ast RakuAST::Type::Parameterized.new(
      base-type => RakuAST::Type::Simple.new(
        RakuAST::Name.from-identifier("Rational")
      )
    );
    is-deeply $deparsed, 'Rational', 'deparse';

    is-deeply $_, Rational, @type[$++]
      for EVAL($ast), EVAL($deparsed), EVAL(EVAL $raku);
}

subtest 'parameterized type with type' => {
    # Rational[Int]
    ast RakuAST::Type::Parameterized.new(
      base-type => RakuAST::Type::Simple.new(
        RakuAST::Name.from-identifier("Rational")
      ),
      args      => RakuAST::ArgList.new(
        RakuAST::Type::Simple.new(
          RakuAST::Name.from-identifier("Int")
        )
      )
    );
    is-deeply $deparsed, 'Rational[Int]', 'deparse';

    is-deeply $_, Rational[Int], @type[$++]
      for EVAL($ast), EVAL($deparsed), EVAL(EVAL $raku);
}

# vim: expandtab shiftwidth=4
