class Perl6::Metamodel::MethodDispatcher {    has @!methods;    has $!idx;    method vivify_for($sub, $lexpad) {        my $obj     := $lexpad['self'];        my $name    := $sub.name;        my @methods := $obj.HOW.methods($obj, $name);        self.new(:methods(@methods), :idx(1))    }    method next() {        my $result := @!methods[$!idx];        $!idx := $!idx + 1;        $result    }    method last() {        @!methods := [];    }}class Perl6::Metamodel::MultiDispatcher {    has @!candidates;    has $!idx;    method vivify_for($sub, $lexpad) {        my $disp  := $sub.dispatcher();        my $args  := $lexpad['callsig'];        my @cands; # XXX := pir::XXX($disp, $args);        self.new(:candidates(@cands), :idx(1))    }    method next() {        my $result := @!candidates[$!idx];        $!idx := $!idx + 1;        $result    }    method last() {        @!candidates := [];    }}class Perl6::Metamodel::WrapDispatcher {    has @!wrappers;    has $!idx;    method new(@wrappers) {        self.bless(:wrappers(@wrappers), :idx(0))    }    method next() {        my $result := @!wrappers[$!idx];        $!idx := $!idx + 1;        $result    }    method last() {        @!wrappers := [];    }}