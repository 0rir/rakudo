#include "pmc_perl6lexinfo.h"
#include "../binder/sixmodelobject.h"
#include "../binder/container.h"

/* Some useful types/container descriptors we like to have to hand. */
static PMC *topic_cd = NULL;
static PMC *error_cd = NULL;
static PMC *match_cd = NULL;
static PMC *Scalar   = NULL;
static PMC *Any      = NULL;

/* Creates a fresh scalar container with the specified descriptor. */
static PMC * fresh_scalar(PARROT_INTERP, PMC *cont_desc) {
    PMC *fresh          = REPR(Scalar)->instance_of(interp, Scalar);
    Rakudo_Scalar *cont = (Rakudo_Scalar *)PMC_data(fresh);
    cont->descriptor    = cont_desc;
    cont->value         = Any;
    return fresh;
}

/* Finds the given name in our outer lexpad. */
static PMC * steal_outer(PARROT_INTERP, PMC *cur_ctx, STRING *name) {
    PMC *outer_ctx = Parrot_pcc_get_outer_ctx(interp, cur_ctx);
    PMC *outer_pad = PMC_IS_NULL(outer_ctx) ? PMCNULL :
        Parrot_pcc_get_lex_pad(interp, outer_ctx);
    return PMC_IS_NULL(outer_pad) ? PMCNULL :
        VTABLE_get_pmc_keyed_str(interp, outer_pad, name);
}

/* Locates the register number for getting the specified name
 * and type of lexical. */
static INTVAL register_number_for_get(PARROT_INTERP, PMC *self,
        PMC *info, STRING *name, INTVAL reg_type) {
    PMC        *name_map;
    const Hash *hash;
    HashBucket *b;

    if (info->vtable->base_type != enum_class_LexInfo) {
        GETATTR_Perl6LexInfo_name_to_register_map(interp, info, name_map);
        hash = (const Hash *)VTABLE_get_pointer(interp, name_map);
    }
    else {
        hash = (const Hash *)VTABLE_get_pointer(interp, info);
    }

    b = Parrot_hash_get_bucket(interp, hash, name);
    if (!b)
        return -1;
    if (((INTVAL)b->value & 3) != reg_type)
        Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_LEX_NOT_FOUND,
            "Lexical '%Ss' is of wrong register type in lexical lookup", name);

    return ((INTVAL)b->value) >> 2;
}

/* Locates the register number for setting the specified name
 * and type of lexical. */
static INTVAL register_number_for_set(PARROT_INTERP, PMC *self,
        PMC *info, STRING *name, INTVAL reg_type) {
    PMC        *name_map;
    const Hash *hash;
    HashBucket *b;

    if (info->vtable->base_type != enum_class_LexInfo) {
        GETATTR_Perl6LexInfo_name_to_register_map(interp, info, name_map);
        hash = (const Hash *)VTABLE_get_pointer(interp, name_map);
    }
    else {
        hash = (const Hash *)VTABLE_get_pointer(interp, info);
    }

    b = Parrot_hash_get_bucket(interp, hash, name);
    if (!b)
        Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_LEX_NOT_FOUND,
            "Lexical '%Ss' not found", name);
    if (((INTVAL)b->value & 3) != reg_type)
        Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_LEX_NOT_FOUND,
            "Lexical '%Ss' is of wrong register type in lexical lookup", name);

    return ((INTVAL)b->value) >> 2;
}

pmclass Perl6LexPad
    provides hash
    auto_attrs
    dynpmc group perl6
    hll perl6
    maps LexPad
{
    /* The static lexical info. */
    ATTR PMC *lexinfo;
    
    /* The current context, including the registers. */
    ATTR PMC *ctx;
    
    /* For %_ we rarely need it, but methods always want to collect it by default.
     * We can't really statically eliminate it, but we can make sure we only create
     * it on demand. This contains a Parrot hash by default, or NULL if there's no
     * named args. The binder sets it, and it'll magically become initialized to
     * a Perl 6 hash if accessed. */
    ATTR PMC *default_named_slurpy;

    VTABLE void init() {
        Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_INVALID_OPERATION,
            "Cannot create a Perl6LexPad PMC without an initializer");
    }

/*

=item C<init_pmc(PMC *lexinfo)>

Initialize the LexPad PMC and remember the associate
lexinfo.

=item C<void set_pointer(void *)>

Associate the context, and set into it any static entries.

=item C<INTVAL elements()>

Returns the number of elements in the hash.

=item C<INTVAL exists_keyed(PMC *name)>

=item C<INTVAL exists_keyed_str(STRING *name)>

Returns whether a lexical C<name> exists in the hash.

=item C<PMC *get_pmc_keyed_str(STRING *name)>

=item C<PMC *get_pmc_keyed(PMC *name)>

Return the lexical with the given name, or NULL (not PMCNULL), if the
lexical doesn't exist.

=item C<void set_pmc_keyed(PMC *name, PMC *value)>

=item C<void set_pmc_keyed_str(STRING *name, PMC *value)>

Set the lexical with the given name to value. If the lexical name
doesn't exist, it is created.

=item C<PMC *get_lexinfo()>

Return the LexInfo PMC, if any or a Null PMC.

=cut

*/
    VTABLE void init_pmc(PMC *lexinfo) {
        SET_ATTR_lexinfo(INTERP, SELF, lexinfo);
        PObj_custom_mark_SET(SELF);
    }
    
    VTABLE void mark() {
        PMC *lexinfo, *ctx;
        GET_ATTR_lexinfo(INTERP, SELF, lexinfo);
        GET_ATTR_ctx(INTERP, SELF, ctx);
        Parrot_gc_mark_PMC_alive(INTERP, lexinfo);
        Parrot_gc_mark_PMC_alive(INTERP, ctx);
    }

    VTABLE void set_pointer(void *ctx) {
        /* Check if we need to put any static values in place. */
        PMC *info;
        GET_ATTR_lexinfo(INTERP, SELF, info);
        if (info->vtable->base_type != enum_class_LexInfo) {
            PMC *static_slots_cache;
            GETATTR_Perl6LexInfo_static_slots_cache(INTERP, info, static_slots_cache);
            if (!PMC_IS_NULL(static_slots_cache)) {
                /* Yes, we have some. Grab values too, then iterate. */
                PMC *static_values_cache;
                PMC *static_clone_flags_cache;
                INTVAL num_statics = VTABLE_elements(interp, static_slots_cache);
                INTVAL i;
                GETATTR_Perl6LexInfo_static_values_cache(INTERP, info, static_values_cache);
                GETATTR_Perl6LexInfo_static_clone_flags_cache(INTERP, info, static_clone_flags_cache);
                for (i = 0; i < num_statics; i++) {
                    INTVAL  slot  = VTABLE_get_integer_keyed_int(interp, static_slots_cache, i);
                    PMC    *value = VTABLE_get_pmc_keyed_int(interp, static_values_cache, i);
                    INTVAL  clone = VTABLE_get_integer_keyed_int(interp, static_clone_flags_cache, i);
                    CTX_REG_PMC(interp, (PMC *)ctx, slot >> 2) = clone ? REPR(value)->clone(interp, value) : value;
                }
                PARROT_GC_WRITE_BARRIER(INTERP, (PMC *)ctx);
            }
        }
        
        /* Stash the context pointer. */
        SET_ATTR_ctx(INTERP, SELF, (PMC *)ctx);
    }

    VTABLE INTVAL elements() {
        PMC *info;
        GET_ATTR_lexinfo(INTERP, SELF, info);
        return VTABLE_elements(interp, info);
    }

    VTABLE INTVAL exists_keyed_str(STRING *name) {
        PMC *info, *name_map;
        const Hash *hash;
        GET_ATTR_lexinfo(INTERP, SELF, info);
        if (info->vtable->base_type != enum_class_LexInfo) {
            GETATTR_Perl6LexInfo_name_to_register_map(INTERP, info, name_map);
            hash = (const Hash *)VTABLE_get_pointer(INTERP, name_map);
        }
        else {
            hash = (const Hash *)VTABLE_get_pointer(INTERP, info);
        }

        return hash->entries
            ? (Parrot_hash_get_bucket(INTERP, hash, name) != 0)
            : 0;
    }

    VTABLE INTVAL exists_keyed(PMC *name) {
        STRING * const s = VTABLE_get_string(INTERP, name);
        return SELF.exists_keyed_str(s);
    }

    VTABLE PMC *get_pmc_keyed_str(STRING *name) {
        PMC    *info;
        INTVAL  reg;
        PMC    *ctx;
        PMC    *result;

        GET_ATTR_lexinfo(INTERP, SELF, info);
        reg = register_number_for_get(INTERP, SELF, info, name, REGNO_PMC);
        if (reg < 0)
            return PMCNULL;
        GET_ATTR_ctx(INTERP, SELF, ctx);
        result = CTX_REG_PMC(interp, ctx, reg);
        
        if (PMC_IS_NULL(result)) {
            /* We lazily handle things like $_, $! and $/. */
            INTVAL fresh_magicals;
            GETATTR_Perl6LexInfo_fresh_magicals(INTERP, info, fresh_magicals);
            if (Parrot_str_equal(interp, name, CONST_STRING(interp, "$_"))) {
                result = fresh_magicals ? fresh_scalar(interp, topic_cd)
                                        : steal_outer(interp, ctx, name);
            }
            else if (Parrot_str_equal(interp, name, CONST_STRING(interp, "$!"))) {
                result = fresh_magicals ? fresh_scalar(interp, error_cd)
                                        : steal_outer(interp, ctx, name);
            }
            else if (Parrot_str_equal(interp, name, CONST_STRING(interp, "$/"))) {
                result = fresh_magicals ? fresh_scalar(interp, match_cd)
                                        : steal_outer(interp, ctx, name);
            }
            VTABLE_set_pmc_keyed_str(interp, SELF, name, result);
        }
        
        return result;
    }
    
    VTABLE INTVAL get_integer_keyed_str(STRING *name) {
        PMC    *info;
        INTVAL  reg;
        PMC    *ctx;

        GET_ATTR_lexinfo(INTERP, SELF, info);
        reg = register_number_for_get(INTERP, SELF, info, name, REGNO_INT);
        if (reg < 0)
            return 0;
        GET_ATTR_ctx(INTERP, SELF, ctx);
        return CTX_REG_INT(interp, ctx, reg);
    }
    
    VTABLE FLOATVAL get_number_keyed_str(STRING *name) {
        PMC    *info;
        INTVAL  reg;
        PMC    *ctx;

        GET_ATTR_lexinfo(INTERP, SELF, info);
        reg = register_number_for_get(INTERP, SELF, info, name, REGNO_NUM);
        if (reg < 0)
            return 0.0;
        GET_ATTR_ctx(INTERP, SELF, ctx);
        return CTX_REG_NUM(interp, ctx, reg);
    }
    
    VTABLE STRING *get_string_keyed_str(STRING *name) {
        PMC    *info;
        INTVAL  reg;
        PMC    *ctx;

        GET_ATTR_lexinfo(INTERP, SELF, info);
        reg = register_number_for_get(INTERP, SELF, info, name, REGNO_STR);
        if (reg < 0)
            return STRINGNULL;
        GET_ATTR_ctx(INTERP, SELF, ctx);
        return CTX_REG_STR(interp, ctx, reg);
    }

    VTABLE PMC *get_pmc_keyed(PMC *name) {
        STRING * const s = VTABLE_get_string(INTERP, name);
        return SELF.get_pmc_keyed_str(s);
    }

    VTABLE INTVAL get_integer_keyed(PMC *name) {
        STRING * const s = VTABLE_get_string(INTERP, name);
        return SELF.get_integer_keyed_str(s);
    }
    
    VTABLE FLOATVAL get_number_keyed(PMC *name) {
        STRING * const s = VTABLE_get_string(INTERP, name);
        return SELF.get_number_keyed_str(s);
    }

    VTABLE STRING *get_string_keyed(PMC *name) {
        STRING * const s = VTABLE_get_string(INTERP, name);
        return SELF.get_string_keyed_str(s);
    }

    VTABLE void set_pmc_keyed_str(STRING *name, PMC *value) {
        PMC    *info;
        INTVAL  reg;
        PMC    *ctx;

        GET_ATTR_lexinfo(INTERP, SELF, info);
        reg = register_number_for_set(INTERP, SELF, info, name, REGNO_PMC);
        GET_ATTR_ctx(INTERP, SELF, ctx);
        CTX_REG_PMC(interp, ctx, reg) = value;
        PARROT_GC_WRITE_BARRIER(INTERP, ctx);
    }
    
    VTABLE void set_integer_keyed_str(STRING *name, INTVAL value) {
        PMC    *info;
        INTVAL  reg;
        PMC    *ctx;

        GET_ATTR_lexinfo(INTERP, SELF, info);
        reg = register_number_for_set(INTERP, SELF, info, name, REGNO_INT);
        GET_ATTR_ctx(INTERP, SELF, ctx);
        CTX_REG_INT(interp, ctx, reg) = value;
    }
    
    VTABLE void set_number_keyed_str(STRING *name, FLOATVAL value) {
        PMC    *info;
        INTVAL  reg;
        PMC    *ctx;

        GET_ATTR_lexinfo(INTERP, SELF, info);
        reg = register_number_for_set(INTERP, SELF, info, name, REGNO_NUM);
        GET_ATTR_ctx(INTERP, SELF, ctx);
        CTX_REG_NUM(interp, ctx, reg) = value;
    }
    
    VTABLE void set_string_keyed_str(STRING *name, STRING *value) {
        PMC    *info;
        INTVAL  reg;
        PMC    *ctx;

        GET_ATTR_lexinfo(INTERP, SELF, info);
        reg = register_number_for_set(INTERP, SELF, info, name, REGNO_STR);
        GET_ATTR_ctx(INTERP, SELF, ctx);
        CTX_REG_STR(interp, ctx, reg) = value;
        PARROT_GC_WRITE_BARRIER(INTERP, ctx);
    }

    VTABLE void set_pmc_keyed(PMC *name, PMC *value) {
        STRING * const s = VTABLE_get_string(INTERP, name);
        SELF.set_pmc_keyed_str(s, value);
    }

    VTABLE void set_integer_keyed(PMC *name, INTVAL value) {
        STRING * const s = VTABLE_get_string(INTERP, name);
        SELF.set_integer_keyed_str(s, value);
    }

    VTABLE void set_number_keyed(PMC *name, FLOATVAL value) {
        STRING * const s = VTABLE_get_string(INTERP, name);
        SELF.set_number_keyed_str(s, value);
    }

    VTABLE void set_string_keyed(PMC *name, STRING *value) {
        STRING * const s = VTABLE_get_string(INTERP, name);
        SELF.set_string_keyed_str(s, value);
    }

    METHOD get_lexinfo() {
        PMC *lexinfo;
        GET_ATTR_lexinfo(INTERP, SELF, lexinfo);
        RETURN(PMC *lexinfo);
    }

/*

=item C<PMC *get_iter()>

Get iterator for declared lexicals.

=cut

*/
    VTABLE PMC *get_iter() {
        PMC *lexinfo;
        GET_ATTR_lexinfo(INTERP, SELF, lexinfo);
        return VTABLE_get_iter(INTERP, lexinfo);
    }
    
    METHOD configure_magicals(PMC *_topic_cd, PMC *_error_cd, PMC *_match_cd,
                              PMC *_Scalar, PMC *_Any) {
        topic_cd = _topic_cd;
        error_cd = _error_cd;
        match_cd = _match_cd;
        Scalar   = _Scalar;
        Any      = _Any;
    }

}

/*

=back

=cut

*/
